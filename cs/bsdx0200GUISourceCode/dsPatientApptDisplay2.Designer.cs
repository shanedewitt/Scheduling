//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace IndianHealthService.ClinicalScheduling {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsPatientApptDisplay2")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsPatientApptDisplay2 : global::System.Data.DataSet {
        
        private PatientApptsDataTable tablePatientAppts;
        
        private BSDXResourceDataTable tableBSDXResource;
        
        private global::System.Data.DataRelation relationFK_BSDXResource_PatientAppts;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsPatientApptDisplay2() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsPatientApptDisplay2(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PatientAppts"] != null)) {
                    base.Tables.Add(new PatientApptsDataTable(ds.Tables["PatientAppts"]));
                }
                if ((ds.Tables["BSDXResource"] != null)) {
                    base.Tables.Add(new BSDXResourceDataTable(ds.Tables["BSDXResource"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PatientApptsDataTable PatientAppts {
            get {
                return this.tablePatientAppts;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BSDXResourceDataTable BSDXResource {
            get {
                return this.tableBSDXResource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsPatientApptDisplay2 cln = ((dsPatientApptDisplay2)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PatientAppts"] != null)) {
                    base.Tables.Add(new PatientApptsDataTable(ds.Tables["PatientAppts"]));
                }
                if ((ds.Tables["BSDXResource"] != null)) {
                    base.Tables.Add(new BSDXResourceDataTable(ds.Tables["BSDXResource"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePatientAppts = ((PatientApptsDataTable)(base.Tables["PatientAppts"]));
            if ((initTable == true)) {
                if ((this.tablePatientAppts != null)) {
                    this.tablePatientAppts.InitVars();
                }
            }
            this.tableBSDXResource = ((BSDXResourceDataTable)(base.Tables["BSDXResource"]));
            if ((initTable == true)) {
                if ((this.tableBSDXResource != null)) {
                    this.tableBSDXResource.InitVars();
                }
            }
            this.relationFK_BSDXResource_PatientAppts = this.Relations["FK_BSDXResource_PatientAppts"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsPatientApptDisplay2";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsPatientApptDisplay2.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePatientAppts = new PatientApptsDataTable();
            base.Tables.Add(this.tablePatientAppts);
            this.tableBSDXResource = new BSDXResourceDataTable();
            base.Tables.Add(this.tableBSDXResource);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_BSDXResource_PatientAppts", new global::System.Data.DataColumn[] {
                        this.tableBSDXResource.RESOURCEIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePatientAppts.RESOURCEIDColumn});
            this.tablePatientAppts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_BSDXResource_PatientAppts = new global::System.Data.DataRelation("FK_BSDXResource_PatientAppts", new global::System.Data.DataColumn[] {
                        this.tableBSDXResource.RESOURCEIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePatientAppts.RESOURCEIDColumn}, false);
            this.Relations.Add(this.relationFK_BSDXResource_PatientAppts);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePatientAppts() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBSDXResource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsPatientApptDisplay2 ds = new dsPatientApptDisplay2();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PatientApptsRowChangeEventHandler(object sender, PatientApptsRowChangeEvent e);
        
        public delegate void BSDXResourceRowChangeEventHandler(object sender, BSDXResourceRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PatientApptsDataTable : global::System.Data.TypedTableBase<PatientApptsRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDOB;
            
            private global::System.Data.DataColumn columnSex;
            
            private global::System.Data.DataColumn columnHRN;
            
            private global::System.Data.DataColumn columnApptDate;
            
            private global::System.Data.DataColumn columnClinic;
            
            private global::System.Data.DataColumn columnTypeStatus;
            
            private global::System.Data.DataColumn columnRESOURCEID;
            
            private global::System.Data.DataColumn columnAPPT_MADE_BY;
            
            private global::System.Data.DataColumn columnDATE_APPT_MADE;
            
            private global::System.Data.DataColumn columnNOTE;
            
            private global::System.Data.DataColumn columnSTREET;
            
            private global::System.Data.DataColumn columnCITY;
            
            private global::System.Data.DataColumn columnSTATE;
            
            private global::System.Data.DataColumn columnZIP;
            
            private global::System.Data.DataColumn columnHOMEPHONE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientApptsDataTable() {
                this.TableName = "PatientAppts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PatientApptsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PatientApptsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SexColumn {
                get {
                    return this.columnSex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HRNColumn {
                get {
                    return this.columnHRN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApptDateColumn {
                get {
                    return this.columnApptDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClinicColumn {
                get {
                    return this.columnClinic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeStatusColumn {
                get {
                    return this.columnTypeStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESOURCEIDColumn {
                get {
                    return this.columnRESOURCEID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APPT_MADE_BYColumn {
                get {
                    return this.columnAPPT_MADE_BY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATE_APPT_MADEColumn {
                get {
                    return this.columnDATE_APPT_MADE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NOTEColumn {
                get {
                    return this.columnNOTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STREETColumn {
                get {
                    return this.columnSTREET;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATEColumn {
                get {
                    return this.columnSTATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIPColumn {
                get {
                    return this.columnZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HOMEPHONEColumn {
                get {
                    return this.columnHOMEPHONE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientApptsRow this[int index] {
                get {
                    return ((PatientApptsRow)(this.Rows[index]));
                }
            }
            
            public event PatientApptsRowChangeEventHandler PatientApptsRowChanging;
            
            public event PatientApptsRowChangeEventHandler PatientApptsRowChanged;
            
            public event PatientApptsRowChangeEventHandler PatientApptsRowDeleting;
            
            public event PatientApptsRowChangeEventHandler PatientApptsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPatientApptsRow(PatientApptsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientApptsRow AddPatientApptsRow(
                        string Name, 
                        System.DateTime DOB, 
                        string Sex, 
                        string HRN, 
                        System.DateTime ApptDate, 
                        string Clinic, 
                        string TypeStatus, 
                        BSDXResourceRow parentBSDXResourceRowByFK_BSDXResource_PatientAppts, 
                        string APPT_MADE_BY, 
                        System.DateTime DATE_APPT_MADE, 
                        string NOTE, 
                        string STREET, 
                        string CITY, 
                        string STATE, 
                        string ZIP, 
                        string HOMEPHONE) {
                PatientApptsRow rowPatientApptsRow = ((PatientApptsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        DOB,
                        Sex,
                        HRN,
                        ApptDate,
                        Clinic,
                        TypeStatus,
                        null,
                        APPT_MADE_BY,
                        DATE_APPT_MADE,
                        NOTE,
                        STREET,
                        CITY,
                        STATE,
                        ZIP,
                        HOMEPHONE};
                if ((parentBSDXResourceRowByFK_BSDXResource_PatientAppts != null)) {
                    columnValuesArray[7] = parentBSDXResourceRowByFK_BSDXResource_PatientAppts[0];
                }
                rowPatientApptsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPatientApptsRow);
                return rowPatientApptsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PatientApptsDataTable cln = ((PatientApptsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PatientApptsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnDOB = base.Columns["DOB"];
                this.columnSex = base.Columns["Sex"];
                this.columnHRN = base.Columns["HRN"];
                this.columnApptDate = base.Columns["ApptDate"];
                this.columnClinic = base.Columns["Clinic"];
                this.columnTypeStatus = base.Columns["TypeStatus"];
                this.columnRESOURCEID = base.Columns["RESOURCEID"];
                this.columnAPPT_MADE_BY = base.Columns["APPT_MADE_BY"];
                this.columnDATE_APPT_MADE = base.Columns["DATE_APPT_MADE"];
                this.columnNOTE = base.Columns["NOTE"];
                this.columnSTREET = base.Columns["STREET"];
                this.columnCITY = base.Columns["CITY"];
                this.columnSTATE = base.Columns["STATE"];
                this.columnZIP = base.Columns["ZIP"];
                this.columnHOMEPHONE = base.Columns["HOMEPHONE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
                this.columnSex = new global::System.Data.DataColumn("Sex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSex);
                this.columnHRN = new global::System.Data.DataColumn("HRN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHRN);
                this.columnApptDate = new global::System.Data.DataColumn("ApptDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApptDate);
                this.columnClinic = new global::System.Data.DataColumn("Clinic", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClinic);
                this.columnTypeStatus = new global::System.Data.DataColumn("TypeStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeStatus);
                this.columnRESOURCEID = new global::System.Data.DataColumn("RESOURCEID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESOURCEID);
                this.columnAPPT_MADE_BY = new global::System.Data.DataColumn("APPT_MADE_BY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPPT_MADE_BY);
                this.columnDATE_APPT_MADE = new global::System.Data.DataColumn("DATE_APPT_MADE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_APPT_MADE);
                this.columnNOTE = new global::System.Data.DataColumn("NOTE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOTE);
                this.columnSTREET = new global::System.Data.DataColumn("STREET", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTREET);
                this.columnCITY = new global::System.Data.DataColumn("CITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITY);
                this.columnSTATE = new global::System.Data.DataColumn("STATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATE);
                this.columnZIP = new global::System.Data.DataColumn("ZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIP);
                this.columnHOMEPHONE = new global::System.Data.DataColumn("HOMEPHONE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHOMEPHONE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientApptsRow NewPatientApptsRow() {
                return ((PatientApptsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PatientApptsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PatientApptsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PatientApptsRowChanged != null)) {
                    this.PatientApptsRowChanged(this, new PatientApptsRowChangeEvent(((PatientApptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PatientApptsRowChanging != null)) {
                    this.PatientApptsRowChanging(this, new PatientApptsRowChangeEvent(((PatientApptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PatientApptsRowDeleted != null)) {
                    this.PatientApptsRowDeleted(this, new PatientApptsRowChangeEvent(((PatientApptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PatientApptsRowDeleting != null)) {
                    this.PatientApptsRowDeleting(this, new PatientApptsRowChangeEvent(((PatientApptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePatientApptsRow(PatientApptsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsPatientApptDisplay2 ds = new dsPatientApptDisplay2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PatientApptsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BSDXResourceDataTable : global::System.Data.TypedTableBase<BSDXResourceRow> {
            
            private global::System.Data.DataColumn columnRESOURCEID;
            
            private global::System.Data.DataColumn columnRESOURCE_NAME;
            
            private global::System.Data.DataColumn columnLETTER_TEXT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BSDXResourceDataTable() {
                this.TableName = "BSDXResource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BSDXResourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BSDXResourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESOURCEIDColumn {
                get {
                    return this.columnRESOURCEID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESOURCE_NAMEColumn {
                get {
                    return this.columnRESOURCE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LETTER_TEXTColumn {
                get {
                    return this.columnLETTER_TEXT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BSDXResourceRow this[int index] {
                get {
                    return ((BSDXResourceRow)(this.Rows[index]));
                }
            }
            
            public event BSDXResourceRowChangeEventHandler BSDXResourceRowChanging;
            
            public event BSDXResourceRowChangeEventHandler BSDXResourceRowChanged;
            
            public event BSDXResourceRowChangeEventHandler BSDXResourceRowDeleting;
            
            public event BSDXResourceRowChangeEventHandler BSDXResourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBSDXResourceRow(BSDXResourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BSDXResourceRow AddBSDXResourceRow(int RESOURCEID, string RESOURCE_NAME, string LETTER_TEXT) {
                BSDXResourceRow rowBSDXResourceRow = ((BSDXResourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RESOURCEID,
                        RESOURCE_NAME,
                        LETTER_TEXT};
                rowBSDXResourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBSDXResourceRow);
                return rowBSDXResourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BSDXResourceDataTable cln = ((BSDXResourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BSDXResourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRESOURCEID = base.Columns["RESOURCEID"];
                this.columnRESOURCE_NAME = base.Columns["RESOURCE_NAME"];
                this.columnLETTER_TEXT = base.Columns["LETTER_TEXT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRESOURCEID = new global::System.Data.DataColumn("RESOURCEID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESOURCEID);
                this.columnRESOURCE_NAME = new global::System.Data.DataColumn("RESOURCE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESOURCE_NAME);
                this.columnLETTER_TEXT = new global::System.Data.DataColumn("LETTER_TEXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLETTER_TEXT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("kBSDXResourceID", new global::System.Data.DataColumn[] {
                                this.columnRESOURCEID}, false));
                this.columnRESOURCEID.AllowDBNull = false;
                this.columnRESOURCEID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BSDXResourceRow NewBSDXResourceRow() {
                return ((BSDXResourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BSDXResourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BSDXResourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BSDXResourceRowChanged != null)) {
                    this.BSDXResourceRowChanged(this, new BSDXResourceRowChangeEvent(((BSDXResourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BSDXResourceRowChanging != null)) {
                    this.BSDXResourceRowChanging(this, new BSDXResourceRowChangeEvent(((BSDXResourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BSDXResourceRowDeleted != null)) {
                    this.BSDXResourceRowDeleted(this, new BSDXResourceRowChangeEvent(((BSDXResourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BSDXResourceRowDeleting != null)) {
                    this.BSDXResourceRowDeleting(this, new BSDXResourceRowChangeEvent(((BSDXResourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBSDXResourceRow(BSDXResourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsPatientApptDisplay2 ds = new dsPatientApptDisplay2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BSDXResourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PatientApptsRow : global::System.Data.DataRow {
            
            private PatientApptsDataTable tablePatientAppts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PatientApptsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePatientAppts = ((PatientApptsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tablePatientAppts.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOB {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePatientAppts.DOBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOB\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sex {
                get {
                    try {
                        return ((string)(this[this.tablePatientAppts.SexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sex\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.SexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HRN {
                get {
                    try {
                        return ((string)(this[this.tablePatientAppts.HRNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HRN\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.HRNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ApptDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePatientAppts.ApptDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApptDate\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.ApptDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Clinic {
                get {
                    try {
                        return ((string)(this[this.tablePatientAppts.ClinicColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Clinic\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.ClinicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeStatus {
                get {
                    try {
                        return ((string)(this[this.tablePatientAppts.TypeStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeStatus\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.TypeStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RESOURCEID {
                get {
                    try {
                        return ((int)(this[this.tablePatientAppts.RESOURCEIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RESOURCEID\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.RESOURCEIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APPT_MADE_BY {
                get {
                    try {
                        return ((string)(this[this.tablePatientAppts.APPT_MADE_BYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'APPT_MADE_BY\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.APPT_MADE_BYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE_APPT_MADE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablePatientAppts.DATE_APPT_MADEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATE_APPT_MADE\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.DATE_APPT_MADEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOTE {
                get {
                    try {
                        return ((string)(this[this.tablePatientAppts.NOTEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NOTE\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.NOTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STREET {
                get {
                    try {
                        return ((string)(this[this.tablePatientAppts.STREETColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STREET\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.STREETColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CITY {
                get {
                    try {
                        return ((string)(this[this.tablePatientAppts.CITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CITY\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.CITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATE {
                get {
                    try {
                        return ((string)(this[this.tablePatientAppts.STATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'STATE\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIP {
                get {
                    try {
                        return ((string)(this[this.tablePatientAppts.ZIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIP\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.ZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HOMEPHONE {
                get {
                    try {
                        return ((string)(this[this.tablePatientAppts.HOMEPHONEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HOMEPHONE\' in table \'PatientAppts\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatientAppts.HOMEPHONEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BSDXResourceRow BSDXResourceRow {
                get {
                    return ((BSDXResourceRow)(this.GetParentRow(this.Table.ParentRelations["FK_BSDXResource_PatientAppts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_BSDXResource_PatientAppts"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tablePatientAppts.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tablePatientAppts.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOBNull() {
                return this.IsNull(this.tablePatientAppts.DOBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOBNull() {
                this[this.tablePatientAppts.DOBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSexNull() {
                return this.IsNull(this.tablePatientAppts.SexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSexNull() {
                this[this.tablePatientAppts.SexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHRNNull() {
                return this.IsNull(this.tablePatientAppts.HRNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHRNNull() {
                this[this.tablePatientAppts.HRNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApptDateNull() {
                return this.IsNull(this.tablePatientAppts.ApptDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApptDateNull() {
                this[this.tablePatientAppts.ApptDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClinicNull() {
                return this.IsNull(this.tablePatientAppts.ClinicColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClinicNull() {
                this[this.tablePatientAppts.ClinicColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeStatusNull() {
                return this.IsNull(this.tablePatientAppts.TypeStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeStatusNull() {
                this[this.tablePatientAppts.TypeStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRESOURCEIDNull() {
                return this.IsNull(this.tablePatientAppts.RESOURCEIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRESOURCEIDNull() {
                this[this.tablePatientAppts.RESOURCEIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPPT_MADE_BYNull() {
                return this.IsNull(this.tablePatientAppts.APPT_MADE_BYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPPT_MADE_BYNull() {
                this[this.tablePatientAppts.APPT_MADE_BYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATE_APPT_MADENull() {
                return this.IsNull(this.tablePatientAppts.DATE_APPT_MADEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATE_APPT_MADENull() {
                this[this.tablePatientAppts.DATE_APPT_MADEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNOTENull() {
                return this.IsNull(this.tablePatientAppts.NOTEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNOTENull() {
                this[this.tablePatientAppts.NOTEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTREETNull() {
                return this.IsNull(this.tablePatientAppts.STREETColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTREETNull() {
                this[this.tablePatientAppts.STREETColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCITYNull() {
                return this.IsNull(this.tablePatientAppts.CITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCITYNull() {
                this[this.tablePatientAppts.CITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATENull() {
                return this.IsNull(this.tablePatientAppts.STATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATENull() {
                this[this.tablePatientAppts.STATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIPNull() {
                return this.IsNull(this.tablePatientAppts.ZIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIPNull() {
                this[this.tablePatientAppts.ZIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHOMEPHONENull() {
                return this.IsNull(this.tablePatientAppts.HOMEPHONEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHOMEPHONENull() {
                this[this.tablePatientAppts.HOMEPHONEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BSDXResourceRow : global::System.Data.DataRow {
            
            private BSDXResourceDataTable tableBSDXResource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BSDXResourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBSDXResource = ((BSDXResourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RESOURCEID {
                get {
                    return ((int)(this[this.tableBSDXResource.RESOURCEIDColumn]));
                }
                set {
                    this[this.tableBSDXResource.RESOURCEIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RESOURCE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableBSDXResource.RESOURCE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RESOURCE_NAME\' in table \'BSDXResource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBSDXResource.RESOURCE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LETTER_TEXT {
                get {
                    try {
                        return ((string)(this[this.tableBSDXResource.LETTER_TEXTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LETTER_TEXT\' in table \'BSDXResource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBSDXResource.LETTER_TEXTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRESOURCE_NAMENull() {
                return this.IsNull(this.tableBSDXResource.RESOURCE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRESOURCE_NAMENull() {
                this[this.tableBSDXResource.RESOURCE_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLETTER_TEXTNull() {
                return this.IsNull(this.tableBSDXResource.LETTER_TEXTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLETTER_TEXTNull() {
                this[this.tableBSDXResource.LETTER_TEXTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientApptsRow[] GetPatientApptsRows() {
                if ((this.Table.ChildRelations["FK_BSDXResource_PatientAppts"] == null)) {
                    return new PatientApptsRow[0];
                }
                else {
                    return ((PatientApptsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_BSDXResource_PatientAppts"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PatientApptsRowChangeEvent : global::System.EventArgs {
            
            private PatientApptsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientApptsRowChangeEvent(PatientApptsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PatientApptsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BSDXResourceRowChangeEvent : global::System.EventArgs {
            
            private BSDXResourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BSDXResourceRowChangeEvent(BSDXResourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BSDXResourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591